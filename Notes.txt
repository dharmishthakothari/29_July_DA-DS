python intro/features
data types
operators (arithmatic,logical ,assignment,
comparison,identity and membership )

conditional stmt (postive/nagative/zero)
- when we are checking condition e.g 
- if , if-else ,if-elif
 
== value 
is indetity 

1. a=10
   b=10
   print(a==b)
   print(a is b)


2. a=100
   b=10
   print(a==b)
   print(a is b)

3. a=100
   b=a
   print(a==b)
   print(a is b)



Even no 2,4,6,8,10... = 
odd no 1,3,5,7,9....
	division reminder
4/2 = 	2 =		 0

6/2 =    3	0

5/2	2	1

11/2	5	1

14/2	7	0

no%2 

if(no%2==0)
{
	cout<<no<<" is Even";

age =0-2  infant 
2-18 = minor
19-50 = adult
51 = senior 


Loops : repetion 
1 user adult 
1000 
10000 

for ,while 

range(start,end,step)

for variable in range():
	stmt
# print hello 5 times 
for a in range(1,6)
	print("Hello")

12th Aug

conditional statement 
	if  - one
	if else - true else false
	if-elif - multiple condition
	
1. 	if comparioson :
		stmt 
	else :
		stmt

2. 	if comparison logical operator comparsion
		stmt
	
	and or 

3.	nested if
		
	blood donation -- age 18
	if age>=18:
		if weight>=50:
			print("You are eligible for donation")
		else:
			printf("Due to underweight you are not eligible for donation")\
	else:
		print("You are not eligible to donate blood")

____________________________________________________
match /switch 

match - when have a multiple conditions

match condition/expression:
	case :
	case :
	case :

1. Addition
2. Substraction
3. multiplication
4. deivision
5. floor divison
6. exponenet 

input 2 and choice=int(input("Enter your choice"))
1.

if choice==1:
	
elif choice==2:
	

LOOPs

	repition 
	for - know the no of iteration then use for 
	while - when no of itreration are not known in advance

	for i in range(start,stop,steps):
		stmt

	while condition:
		stmt
		
while
	1. addition
	2. substraction
	3. exit

		


________________________________
14th Aug

loops 
	for - no of iteration (range,list)
	while - iteration are known in advanced

nested if 
match case : multiple conditions

break  ---- > breaking the loop/iteration
continue  ----> skip the current ineration
		if i==5:
			continue
		
pass	---> nothing/placeholder 

random numbers --> import


generate 1 random number (1-10)

user will Guess enter number
guess===random
	you win
else
	
random 1-10

user guess number
guess!=randome
	ask guess number


_____________________________________
19th Aug

String functions -
upper
lower
title
count
capitalize
find
replace

name="123456"
name1="Tops123"
name2="Tops Technologies"
name4="TopsTechnologies"
name5="Tops@Technologies"

isdigit
isalpha
isaplnum

startswith
endswith

string --- slicing / part/portion
2-10
T	0
o	1
p	2
s	3
	4
t	5
e	6
c
h
n
o
l
o
g	-4
i	-3
e	-2
s	-1

string[start:end:step]

name[0:4] - Tops
name[0:4:2]

name[8:5]
utsav -- vtsau 


indexing

________________________

Pattern
   c1 c2 c3 c4	
r1 *
r2 * *
r3 * * *
r4 * * * *


1
2 2
3 3 3
4 4 4 4

--->
4 4 4 4
3 3 3
2 2
1

---->
A
A	B
A	B	C

chr - ord

________________________________________

21st Aug

list -->  ?  1. []
	2. under name you have multiple items
	3. it is mutable/change
	4. indexing
	5. slicing
	6. in build methods
lst_names = ['dharmishtha','Dixita','Preksha']]
1. Upper
2. Lower
3. Count vowel
4. len
5. exit

menu driven program
loop while,break,match,
1. ["DHARMIHSTHA","DIXITA","PREKSHA"]
3. [3,3,2]
4. [11,6,7]



23rd Aug

list - slicing ,append , del, list iteration

methods - 

lst_name = ['Apple','Microsoft','HP']

	values Apple
		Microsoft
		HP
	index	0
		1
		2

check where list contains another list or not
lst_name=['Apple','Microsoft','HP']
	false
lst_name=['Apple','Microsoft','HP',[1,2,3]]
	True

indexing - 0 


Comprehensive - 

[]
for i in lst_name:
	print(i)
	lst_name1.append(i)

lst_name1=[i for i in lst_name]


































