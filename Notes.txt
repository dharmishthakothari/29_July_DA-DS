python intro/features
data types
operators (arithmatic,logical ,assignment,
comparison,identity and membership )

conditional stmt (postive/nagative/zero)
- when we are checking condition e.g 
- if , if-else ,if-elif
 
== value 
is indetity 

1. a=10
   b=10
   print(a==b)
   print(a is b)


2. a=100
   b=10
   print(a==b)
   print(a is b)

3. a=100
   b=a
   print(a==b)
   print(a is b)



Even no 2,4,6,8,10... = 
odd no 1,3,5,7,9....
	division reminder
4/2 = 	2 =		 0

6/2 =    3	0

5/2	2	1

11/2	5	1

14/2	7	0

no%2 

if(no%2==0)
{
	cout<<no<<" is Even";

age =0-2  infant 
2-18 = minor
19-50 = adult
51 = senior 


Loops : repetion 
1 user adult 
1000 
10000 

for ,while 

range(start,end,step)

for variable in range():
	stmt
# print hello 5 times 
for a in range(1,6)
	print("Hello")

12th Aug

conditional statement 
	if  - one
	if else - true else false
	if-elif - multiple condition
	
1. 	if comparioson :
		stmt 
	else :
		stmt

2. 	if comparison logical operator comparsion
		stmt
	
	and or 

3.	nested if
		
	blood donation -- age 18
	if age>=18:
		if weight>=50:
			print("You are eligible for donation")
		else:
			printf("Due to underweight you are not eligible for donation")\
	else:
		print("You are not eligible to donate blood")

____________________________________________________
match /switch 

match - when have a multiple conditions

match condition/expression:
	case :
	case :
	case :

1. Addition
2. Substraction
3. multiplication
4. deivision
5. floor divison
6. exponenet 

input 2 and choice=int(input("Enter your choice"))
1.

if choice==1:
	
elif choice==2:
	

LOOPs

	repition 
	for - know the no of iteration then use for 
	while - when no of itreration are not known in advance

	for i in range(start,stop,steps):
		stmt

	while condition:
		stmt
		
while
	1. addition
	2. substraction
	3. exit

		


________________________________
14th Aug

loops 
	for - no of iteration (range,list)
	while - iteration are known in advanced

nested if 
match case : multiple conditions

break  ---- > breaking the loop/iteration
continue  ----> skip the current ineration
		if i==5:
			continue
		
pass	---> nothing/placeholder 

random numbers --> import


generate 1 random number (1-10)

user will Guess enter number
guess===random
	you win
else
	
random 1-10

user guess number
guess!=randome
	ask guess number


_____________________________________
19th Aug

String functions -
upper
lower
title
count
capitalize
find
replace

name="123456"
name1="Tops123"
name2="Tops Technologies"
name4="TopsTechnologies"
name5="Tops@Technologies"

isdigit
isalpha
isaplnum

startswith
endswith

string --- slicing / part/portion
2-10
T	0
o	1
p	2
s	3
	4
t	5
e	6
c
h
n
o
l
o
g	-4
i	-3
e	-2
s	-1

string[start:end:step]

name[0:4] - Tops
name[0:4:2]

name[8:5]
utsav -- vtsau 


indexing

________________________

Pattern
   c1 c2 c3 c4	
r1 *
r2 * *
r3 * * *
r4 * * * *


1
2 2
3 3 3
4 4 4 4

--->
4 4 4 4
3 3 3
2 2
1

---->
A
A	B
A	B	C

chr - ord

________________________________________

21st Aug

list -->  ?  1. []
	2. under name you have multiple items
	3. it is mutable/change
	4. indexing
	5. slicing
	6. in build methods
lst_names = ['dharmishtha','Dixita','Preksha']]
1. Upper
2. Lower
3. Count vowel
4. len
5. exit

menu driven program
loop while,break,match,
1. ["DHARMIHSTHA","DIXITA","PREKSHA"]
3. [3,3,2]
4. [11,6,7]



23rd Aug

list - slicing ,append , del, list iteration

methods - 

lst_name = ['Apple','Microsoft','HP']

	values Apple
		Microsoft
		HP
	index	0
		1
		2

check where list contains another list or not
lst_name=['Apple','Microsoft','HP']
	false
lst_name=['Apple','Microsoft','HP',[1,2,3]]
	True

indexing - 0 


Comprehensive - 

[]
for i in lst_name:
	print(i)
	lst_name1.append(i)

lst_name1=[i for i in lst_name]

26th Aug
List methods -- append,insert , extend , clear  , pop 
slicing ls[::]
lst1= lst[1:]

comprenhesive  - consice way or more readable form

same dictionary 

1.  lst_numbers = [11,23,78,90]
	with comprehensive = ['Odd','Odd','Even','Even']

2. lst_numbers = ['+919876543210','8766566666','+911234567890']
comprehensive   lst_valid_contact_numbers = ['+919876543210','+911234567890']

tuple 
tuple_numbers= (1,2,3,54)
tuple_num1 = [1,2,3,54]

28th Aug

Tuple methods 
->index
->count

comprehensive -->

set --> collection of unique elements 
st_numbers = {1,2,3,4,5,"1",2,1}

union
intersection
difference 
set1={1,2,3,4}
set2={2,3,56,34}


set3 = set1 & set2
print(set3)

set4=set1 | set2
print(set4)

set5 = set1 - set2
print(set5)

dictionary --> key and value pair
key is unique
value may be dublicate

dict1= {1:"qwerty" , 
	2:"lkjhg",
	3:"ccccc",
	4:1234,
	"1":1234,
	2:6789
}
}

1. key 
2. values
3. items

indexing 

dic_student =
{
	1234:["Dixita",123456,"C G Road"],
	4567:["Utsav",345754,"Paldi"]
}
lst_number = [22,33,11,77,66]
lst_number[1]

dict[4567]

2nd Sep

set,dictionary 

union,intersection ,diffrence 
dict - keys,values,items 

list-tuple-dict-set

st_number = {}

type(st_number)

index /key

dict1={"1":"123456",
	"2":"456456",
	"name":"ueiruer"	
}

dict1['name']


123 : ['Utsav','C G Road',120],
345 : ['Dixita','Parimal',190],
456:['Dhruvi','S G Highway',230]

123
	usav
	C G Road
	120
345
	Dixita
	Parimal 
	190

Lab task
1. find those students who got marks greater than 200

Lab task 
2. Summation of all marks

student data with menu 
roll_number - key
name as value

1. for add
2. for edit
3. delete 
4. view all
5. search 

when you are coping from one dictionary to another 
at that time if original dictionary change/edit value then what about copied dictionary?

pop
popitem
setdefault

collection - done

topics -->
set , indexing , slicing , dictionary , tuple
list , loops (for-while)
conditional stmt  (if-elif)
string
data types
operators


generator-iterator 

functions  - 

4th Sep

Functions ?

int()
float()
copy()
get()
pop()
popitem()

whatever key passing it remturs value thaqt key
get(1)

int("123")
123 - 

convert string to integer --- int
fetch value from key --- get
convert string into upper case --upper()

Function - set of instructoins to perform specific task 
2 Types 
1. in built  - print(),format(), input(),int(),float()
2. user defined - that we are creating 


functions have 
name - 	int , get
parameter - str , key(str,int...)
return type - int , value

user defined -->
#declare/implemetation of function
def hello():
	print("Hello")

# calling function
hello()

Lab task edit function as explained 

function paramter are of 3 types 

->default
->variable argument
->keyword argument

Lab task ->Sequnece default paramter 
-->create function to find power of number 
	2 parameter num,pow
			2 3
			8

			5 3
			125
-->is number prime or not
	17 -- > prime
	12 --> not prime

	1.input num>1
	2. loop 2 to num-1
	3. conidition divisable 

-->Factorial no of given number if use is not enter number then you havbe to take default as 1


6th Sep
 


1. from number 1 -10 sum
2. reverse string withut using function
3. list of string sort  lst = ['ahemdabad','surat','baroda']
	


default 
variable  *args
keyword  **kwargs

Lab task sequece 

*args parameter
**kwargs 
e.g def emp_details(name,age,**k):

-->lambda 
annonymus function / no name
inline
short function/ no complex logic

lambda argument : expression

def square(num):
	return num*num

square(4)

2nd example

def square(num):
	if num%2==0:
		return num*num




prime number 

divisable by  1-number

4 == 2-3
17 = 2-16
99 = 2-98

4%2 ans =0
break

99%2=rem
99%3 = 0
break
	
num=17
flag=1
for i in range(2,num):
	if num%i==0:
		flag=0
		break
if flag==0:
	print("Not Prime number")
else:
	print("Prime number")

1st iteration 17%2 = 
2nd 	17%3 = 
3rd 	17%4 = 
16th iteration 17%16=

num= 15
1st iteration 15%2 = 
2nd 	15%3 = 


1-100 prime numbers 


11th Sep

map  - functions and iterator map together
	map(square,list_numbers)

def square(num)	
	return num*num

map(lambda num:num*num,[])


convert city name into upper whose length is greater 5 


filter len >5

Lab task : list of string which have vowel in string
lst_cities = ['rajkot','ahmedababd','surat','lynn']

lst_vowel_list = ['rajkot','ahmedababd','surat']

--filter the prime elements from list 

map-filter 

base_lst1 = [1,2,3,4]
pow_lst2 = [1,4,5,2]
pow 1^1 2^4 3^5 4^2

reduce -  

13th Sep

string ----- methods-slice
loops	---- while for
conditional stmt ----- if,if elif,match
operators 
collection - list,tuple,set,dictionary
map ,filter,reduce
functions - parameters 

iterator / Generator
recursive function
file handling
exceptions
OOPS


iterator  ? 

iter
next

Generator -- memory management/efficeient 

def test():
	return "hello"

test()
test()

def test():
	yield 

recursive function 
	function calles itself
	1. base (break)
	2. recusive 	

def name(par):
	return name(par)

for i in range(1,5):
	fact=fact*i

print(fact)

def fact(num):
	for i in range(1,num):
		fact=fact*i
	return fact

1-10 sum




nested dictionary 


petrol  -- brands - modals 
ev
diesal





















